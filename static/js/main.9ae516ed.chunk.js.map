{"version":3,"sources":["components/button/button.jsx","components/display/display.jsx","main/Calculator.jsx","reportWebVitals.js","index.js"],"names":["props","className","operation","double","triple","React","createElement","onClick","e","click","label","value","initialState","displayValue","clearDisplay","values","current","Calculator","Component","constructor","super","this","state","clearMemory","bind","setOperation","addDigit","setState","console","log","equals","currentOperation","n","includes","currentValue","i","newValues","parseFloat","render","Display","Button","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","StrictMode"],"mappings":"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","file":"static/js/main.9ae516ed.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './button.css';\r\n\r\nexport default props => {\r\n\r\n    let className = 'button ';\r\n\r\n    className += props.operation ? 'operation' : '';\r\n    className += props.double ? 'double' : '';\r\n    className += props.triple ? 'triple' : '';\r\n    return (\r\n    \r\n        <button className={className}\r\n            onClick={e => props.click(props.label)}>\r\n            {props.label}\r\n        </button>\r\n    )\r\n}\r\n\r\n    \r\n","import React from 'react';\r\nimport './display.css';\r\n\r\nexport default props => <div className=\"display\">{props.value}</div>","import React, { Component } from \"react\";\r\nimport './calculator.css';\r\n\r\nimport Button from \"../components/button/button\";\r\nimport Display from \"../components/display/display\";\r\n\r\nconst initialState = {\r\n    displayValue: '0',\r\n    clearDisplay: false,\r\n    operation: null,\r\n    values: [0,0],\r\n    current: 0,\r\n}\r\n\r\nexport default class Calculator extends Component {\r\n\r\n    state = { ...initialState};\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.clearMemory = this.clearMemory.bind(this);\r\n        this.setOperation = this.setOperation.bind(this);\r\n        this.addDigit = this.addDigit.bind(this);\r\n    }\r\n\r\n    clearMemory() {\r\n        this.setState({ ...initialState })\r\n        console.log('limpar');\r\n    }\r\n\r\n    setOperation(operation) {\r\n        console.log(operation)\r\n        if (this.state.current === 0){\r\n            this.setState({ operation, current: 1, clearDisplay: true})\r\n        } else {\r\n            const equals = operation === '='\r\n            const currentOperation = this.state.operation\r\n            const values = [...this.state.values]\r\n\r\n            switch (currentOperation) {\r\n                case \"+\":\r\n                        values[0] = values[0] + values[1];\r\n                        values[1] = 0\r\n                    break;\r\n                case \"*\":\r\n                        values[0] = values[0] * values[1];\r\n                        values[1] = 0\r\n                    break;\r\n                case \"/\":\r\n                        values[0] = values[0] / values[1];\r\n                        values[1] = 0\r\n                    break;\r\n                case \"-\":\r\n                        values[0] = values[0] - values[1];\r\n                        values[1] = 0\r\n                    break;\r\n                \r\n                default:\r\n                    values[0] = \"error\"\r\n\r\n            }\r\n            // values[0] = eval(`${values[0]} ${currentOperation} ${values[1]}`)\r\n            // values[1] = 0\r\n\r\n            this.setState({\r\n                displayValue: values[0],\r\n                operation: equals ? null : operation,\r\n                current: equals ? 0 : 1,\r\n                clearDisplay: !equals,\r\n                values\r\n            })\r\n        }\r\n    }\r\n\r\n    addDigit(n) {\r\n        if (n === '.' && this.state.displayValue.includes('.')) {\r\n            return\r\n        }\r\n        const clearDisplay = this.state.displayValue === '0'\r\n            || this.state.clearDisplay\r\n\r\n        const currentValue = clearDisplay ? '' : this.state.displayValue;\r\n        console.log(currentValue)\r\n        const displayValue = currentValue + n;\r\n        console.log(displayValue)\r\n        this.setState({ displayValue, clearDisplay: false });\r\n\r\n        if (n !== '.') {\r\n            const i = this.state.current;\r\n            const newValues = parseFloat(displayValue);\r\n            const values = [...this.state.values]\r\n            values[i] = newValues\r\n            this.setState({ values: values })\r\n            console.log(values)\r\n        }\r\n        \r\n    }\r\n\r\n    render() {\r\n\r\n        return (<div className=\"calculator\">\r\n            <Display value={this.state.displayValue} />\r\n            <Button label=\"AC\" click={this.clearMemory} triple />\r\n            <Button label=\"/\" click={this.setOperation} operation />\r\n            <Button label=\"7\" click={this.addDigit} />\r\n            <Button label=\"8\" click={this.addDigit} />\r\n            <Button label=\"9\" click={this.addDigit} />\r\n            <Button label=\"*\" click={this.setOperation} operation />\r\n            <Button label=\"4\" click={this.addDigit} />\r\n            <Button label=\"5\" click={this.addDigit} />\r\n            <Button label=\"6\" click={this.addDigit} />\r\n            <Button label=\"-\" click={this.setOperation} operation />\r\n            <Button label=\"1\" click={this.addDigit} />\r\n            <Button label=\"2\" click={this.addDigit} />\r\n            <Button label=\"3\" click={this.addDigit} />\r\n            <Button label=\"+\" click={this.setOperation} operation />\r\n            <Button label=\"0\" click={this.addDigit} double />\r\n            <Button label=\".\" click={this.addDigit} />\r\n            <Button label=\"=\" click={this.setOperation} operation />\r\n\r\n        </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport Calculator from './main/Calculator';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <h1>Calculator</h1>\r\n    <Calculator/>\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}